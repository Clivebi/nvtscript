CPE = "cpe:/o:cisco:nx-os";
if(description){
	script_oid( "1.3.6.1.4.1.25623.1.0.105699" );
	script_cve_id( "CVE-2015-4324" );
	script_tag( name: "cvss_base", value: "6.1" );
	script_tag( name: "cvss_base_vector", value: "AV:A/AC:L/Au:N/C:N/I:N/A:C" );
	script_version( "2019-10-09T06:43:33+0000" );
	script_name( "Cisco NX-OS Internet Group Management Protocol Denial of Service Vulnerability" );
	script_xref( name: "URL", value: "http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/Cisco-SA-20150817-CVE-2015-4324" );
	script_tag( name: "vuldetect", value: "Checks if a vulnerable version is present on the target host." );
	script_tag( name: "solution", value: "See the referenced vendor advisory for a solution." );
	script_tag( name: "summary", value: "A vulnerability in the Internet Group Management Protocol version 3 (IGMPv3) input packet
processing of Cisco NX-OS could allow an unauthenticated, adjacent attacker to cause the IGMP
process to restart due to a malformed IGMP packet, which could cause a denial of service (DoS)
condition on the device.

The vulnerability is due to improper input validation when ensuring the memory allocated is large
enough for the number of included sources in the IGMPv3 packet. An attacker could exploit this
vulnerability by sending a crafted IGMPv3 packet to the targeted device. An exploit could allow the
attacker to cause the IGMP process to restart due to a buffer overflow, which may cause a DoS
condition.

Cisco has confirmed the vulnerability. Software updates are available.

An unauthenticated, adjacent attacker could use this vulnerability if the targeted device's IGMPv3
snooping is configured on one or more VLANs and running the affected version of the software.

To exploit this vulnerability, an attacker must be on the same broadcast or collision domain as the
affected device. This access requirement could decrease the likelihood of a successful exploit." );
	script_tag( name: "qod_type", value: "package" );
	script_tag( name: "solution_type", value: "VendorFix" );
	script_tag( name: "last_modification", value: "2019-10-09 06:43:33 +0000 (Wed, 09 Oct 2019)" );
	script_tag( name: "creation_date", value: "2016-05-12 16:08:14 +0200 (Thu, 12 May 2016)" );
	script_category( ACT_GATHER_INFO );
	script_family( "CISCO" );
	script_copyright( "This script is Copyright (C) 2016 Greenbone Networks GmbH" );
	script_dependencies( "gb_cisco_nx_os_version.sc" );
	script_mandatory_keys( "cisco_nx_os/version", "cisco_nx_os/model", "cisco_nx_os/device" );
	exit( 0 );
}
require("host_details.inc.sc");
require("version_func.inc.sc");
if(!version = get_app_version( cpe: CPE )){
	exit( 0 );
}
if(!device = get_kb_item( "cisco_nx_os/device" )){
	exit( 0 );
}
if(!ContainsString( device, "Nexus" )){
	exit( 0 );
}
if(!nx_model = get_kb_item( "cisco_nx_os/model" )){
	exit( 0 );
}
if(ContainsString( nx_model, "1000V" )){
	affected = make_list( "7.3(0)ZN(0.81)" );
}
if(IsMatchRegexp( nx_model, "^3[0-9]+" )){
	affected = make_list( "7.3(0)ZN(0.81)" );
}
if(IsMatchRegexp( nx_model, "^4[0-9]+" )){
	affected = make_list( "4.1(2)E1(1c)" );
}
if(IsMatchRegexp( nx_model, "^7[0-9]+" )){
	affected = make_list( "7.2(0)N1(0.1)" );
}
if(IsMatchRegexp( nx_model, "^N9K" )){
	affected = make_list( "7.3(0)ZN(0.81)" );
}
for af in affected {
	if(version == af){
		report = report_fixed_ver( installed_version: version, fixed_version: "See advisory" );
		security_message( port: 0, data: report );
		exit( 0 );
	}
}
exit( 99 );

