CPE = "cpe:/o:juniper:junos";
if(description){
	script_oid( "1.3.6.1.4.1.25623.1.0.106024" );
	script_version( "$Revision: 12106 $" );
	script_tag( name: "last_modification", value: "$Date: 2018-10-26 08:33:36 +0200 (Fri, 26 Oct 2018) $" );
	script_tag( name: "creation_date", value: "2015-07-14 10:58:02 +0700 (Tue, 14 Jul 2015)" );
	script_tag( name: "cvss_base", value: "5.0" );
	script_tag( name: "cvss_base_vector", value: "AV:N/AC:L/Au:N/C:N/I:N/A:P" );
	script_tag( name: "qod_type", value: "package" );
	script_tag( name: "solution_type", value: "VendorFix" );
	script_cve_id( "CVE-2015-5363" );
	script_name( "Junos SRX NSD Denial of Service Vulnerability" );
	script_category( ACT_GATHER_INFO );
	script_family( "JunOS Local Security Checks" );
	script_copyright( "This script is Copyright (C) 2015 Greenbone Networks GmbH" );
	script_dependencies( "gb_ssh_junos_get_version.sc", "gb_junos_snmp_version.sc" );
	script_mandatory_keys( "Junos/Version", "Junos/model" );
	script_tag( name: "summary", value: "Junos OS is prone to a DoS vulnerability in the Network Security
Daemon." );
	script_tag( name: "vuldetect", value: "Checks if a vulnerable OS build is present on the target host." );
	script_tag( name: "insight", value: "The vulnerability can happen while processing certain DNS response
messages for name resolution requests initiated by the SRX device. An attack would require a rogue DNS server." );
	script_tag( name: "impact", value: "Repeated crashes of the nsd process would prevent SRX's security
subsystem from functioning properly." );
	script_tag( name: "affected", value: "Junos OS 12.1X44, 12.1X46, 12.1X47 and 12.3X48" );
	script_tag( name: "solution", value: "New builds of Junos OS software are available from Juniper." );
	script_xref( name: "URL", value: "http://kb.juniper.net/JSA10692" );
	exit( 0 );
}
require("host_details.inc.sc");
require("revisions-lib.inc.sc");
model = get_kb_item( "Junos/model" );
if(!model || !ContainsString( toupper( model ), "SRX" )){
	exit( 99 );
}
if(!version = get_app_version( cpe: CPE, nofork: TRUE )){
	exit( 0 );
}
if(IsMatchRegexp( version, "^12" )){
	if( ( revcomp( a: version, b: "12.1X44-D50" ) < 0 ) && ( revcomp( a: version, b: "12.1X44" ) >= 0 ) ){
		security_message( port: 0, data: version );
		exit( 0 );
	}
	else {
		if( ( revcomp( a: version, b: "12.1X46-D35" ) < 0 ) && ( revcomp( a: version, b: "12.1X46" ) >= 0 ) ){
			security_message( port: 0, data: version );
			exit( 0 );
		}
		else {
			if( ( revcomp( a: version, b: "12.1X47-D25" ) < 0 ) && ( revcomp( a: version, b: "12.1X47" ) >= 0 ) ){
				security_message( port: 0, data: version );
				exit( 0 );
			}
			else {
				if(( revcomp( a: version, b: "12.3X48-D15" ) < 0 ) && ( revcomp( a: version, b: "12.3X" ) >= 0 )){
					security_message( port: 0, data: version );
					exit( 0 );
				}
			}
		}
	}
}
exit( 99 );

